package cmd

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"

	"github.com/onerobotics/fexcel/fexcel"
	"github.com/spf13/cobra"
)

var (
	globalCfg fexcel.Config
)

var rootCmd = &cobra.Command{
	Use:   "fexcel",
	Short: "Process a spreadsheet and report what fexcel sees",
	Args:  validateRootArgs,
	RunE:  rootMain,
	PersistentPostRunE: func(cmd *cobra.Command, args []string) error {
		if !globalCfg.NoUpdate {
			err := fexcel.CheckForUpdates(os.Stdout)
			if err != nil {
				return errors.New("failed to get latest version id from GitHub.")
			}
		}

		return nil
	},
}

func init() {
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Numregs, "numregs", "", "", "start cell of numeric register ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Posregs, "posregs", "", "", "start cell of position register ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Ualms, "ualms", "", "", "start cell of user alarm ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Rins, "rins", "", "", "start cell of robot input ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Routs, "routs", "", "", "start cell of robot output ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Dins, "dins", "", "", "start cell of digital input ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Douts, "douts", "", "", "start cell of digital output ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Ains, "ains", "", "", "start cell of analog input ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Aouts, "aouts", "", "", "start cell of analog output ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Sregs, "sregs", "", "", "start cell of string register ids")
	rootCmd.PersistentFlags().StringVarP(&globalCfg.Flags, "flags", "", "", "start cell of flag ids")

	rootCmd.PersistentFlags().StringVarP(&globalCfg.Sheet, "sheet", "", "Sheet1", "default sheet to look at when unspecified in the start cell")
	rootCmd.PersistentFlags().IntVarP(&globalCfg.Offset, "offset", "", 1, "column offset between ids and comments")
	rootCmd.PersistentFlags().BoolVarP(&globalCfg.NoUpdate, "noupdate", "", false, "don't check for fexcel updates")

}

func validateRootArgs(cmd *cobra.Command, args []string) error {
	if len(args) != 1 {
		return errors.New("requires a spreadsheet")
	}

	ext := filepath.Ext(args[0])
	if ext != ".xlsx" {
		return errors.New("requires a .xlsx file generated by Excel 2007 or later")
	}

	return nil
}

func rootMain(cmd *cobra.Command, args []string) error {
	fmt.Printf(fexcel.Logo())

	fpath := args[0]

	f, err := fexcel.PrepareFile(fpath, globalCfg)
	if err != nil {
		return err
	}

	if len(f.Locations) == 0 {
		fmt.Println("No location flags specified.")
		return nil
	}

	for d, _ := range f.Locations {
		defs, err := f.Definitions(d)
		if err != nil {
			return err
		}

		fmt.Printf("Found %d %ss.\n", len(defs), d.VerboseName())
	}

	return nil
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}
